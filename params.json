{"name":"C++ Code Standards","tagline":"aims to deobfuscate and decomplexify projects written in \"modern\" c++; c0x11 has been standard for a while","body":"## Object Lifetime\r\n\r\n#### Use smart pointers\r\n+ Don't manage memory, manage objects: objects manage resources\r\n+ Only use memory allocation when you are implementing hardware\r\n+ Use the most appropriate smart pointer type: unique if you will need only one reference; shared if you will share it\r\n\r\n#### Don't allocate memory using global functions\r\n+ Use new instead of alloc and dealloc\r\n\r\n#### Encapsulate resources \r\n+ Use smart pointer instance members\r\n+ Use initialization lists, allocate resources in constructors\r\n+ Release resources in destructors\r\n\r\n#### Use copy and move for smart pointers\r\n+ Copy when resources will be used in both the destination and the source\r\n+ Move when resources will be used only in the destination scope\r\n  Additional notes on values and copy/move: http://msdn.microsoft.com/en-us/library/hh438479.aspx\r\n\t\r\n#### Use stack based scope / lifetime before heap\r\n+ Declare variables and members at the top of the scope in which they are used\r\n+ Data member lifetime is virtually overhead free (no, there is no garbage collector)\r\n+ Maintainability and simplification (stack) valued over tiny performance gain (heap); also helps eliminate memory leaks\r\n\r\n#### Copy constructors should be avoided\r\n\r\n## Type definitions\r\n\r\n#### Don't use multiple inheritance\r\n+ Confusing; rarely useful\r\n\r\n#### Delegate \"chain\" constructors\r\n\r\n#### Don't hide types with variable names\r\n+ C++ allows you to replace a type name with a variable name.. Don't.\r\n\r\n#### Names of types, variables, methods, and data members should be meaningful\r\n+ Only widely used abbreviations\r\n+ Underscores should only appear in constants\r\n\r\n#### Use pimpl for dependencies (pointer to implementation)\r\n+ http://msdn.microsoft.com/en-us/library/vstudio/hh438477(v=vs.110).aspx\r\n\t\r\n#### Namespace your things\r\n+ Don't mess with global namespace... no one else does, why should you\r\n\r\n#### Method declaration should not be included in class definitions\r\n\r\n#### Use strongly-typed enums\r\n+ enum class vs enum; eliminates potential collisions\r\n\r\n## Containers\r\n\r\n#### Use range-based for statement\r\n+ Use std::begin and std::end for types that don't already have these\r\n+ Iterator should be marked as constant, especially (and you really shouldn't do this) if you are not replacing a reference in your loop\r\n\r\n#### Use appropriate std containers\r\n+ For example: array for fixed size collection; vector, list, map, etc for dynamic\r\n+ Use list for quick insert / removal\r\n+ Use vector if you need random access\r\n+ Use map for lookups\r\n+ Don't be afraid to use smart pointer types as element type\r\n\t\r\n#### Use map for associative collections\r\n+ Do not use pointers or complex types for keys\r\n+ Use make_pair for constructing pairs\r\n\r\n## Algorithms / Logic\r\n\r\n#### Use std algorithms library\r\n+ When a standard algorithm implementation exists for given logic, it should be used instead of writing said logic\r\n\r\n## Data Members and variables\r\n\r\n#### Use auto for locally scoped variables\r\n+ Reduces redundancy and increases readability\r\n\t\r\n#### Use complex argument types over argument lists\r\n\r\n#### Use nullptr\r\n+ Don't initialize things to 0\r\n\r\n## Threading\r\n\r\n#### Minimize use of operating system objects\r\n+ Use atomic types and flags over mutex; use std:mutex over platform specific\r\n\r\n#### Use threading efficiently\r\n+ Spawn threads only when they will / can be used: default thread implementation does not consider resources\r\n\t\r\n#### Do not use volatile keyword for non-atomic access to variables\r\n+ Operations on volatile variables are not atomic and do not define behavior useful for threading\r\n+ Use atomic types and mutex\r\n\r\n## Assertions and Exceptions\r\n\r\n#### Use type traits\r\n+ Compile time type queries\r\n+ Static assertions\r\n\t\r\n#### Throw and handle exceptions for error condition\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}